class Superhero:
    def __init__(self, name, power, secret_identity):
        self.name = name
        self.power = power
        self.__secret_identity = secret_identity  # Private attribute (encapsulation)

    def introduce(self):
        return f"I am {self.name}, and my power is {self.power}!"

    def reveal_secret(self):
        return f"My real name is {self.__secret_identity}."

# Inheritance: Avengers are a type of Superhero
class Avenger(Superhero):
    def __init__(self, name, power, secret_identity, team_role):
        super().__init__(name, power, secret_identity)  # Calls parent's __init__
        self.team_role = team_role

    def assemble(self):
        return f"{self.name} is ready for battle! Role: {self.team_role}"

# Creating objects
spiderman = Superhero("Spider-Man", "web-slinging", "Peter Parker")
ironman = Avenger("Iron Man", "tech genius", "Tony Stark", "Leader")

print(spiderman.introduce())  # Output: I am Spider-Man, and my power is web-slinging!
print(ironman.assemble())     # Output: Iron Man is ready for battle! Role: Leader
print(ironman.reveal_secret())  # Output: My real name is Tony Stark.
